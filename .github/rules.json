[
  {
    "rule": "Function Documentation",
    "description": "All functions must include a summary comment or inheritdoc.",
    "example": "/// <summary>\n/// This function adds two numbers.\n/// </summary>"
  },
  {
    "rule": "Summary Comments Format",
    "description": "Summary comments must match the function return type and parameter names.",
    "example": "/// <summary>\n/// Calculates the sum of two numbers.\n/// </summary>\n/// <param name=\"a\">The first number.</param>\n/// <param name=\"b\">The second number.</param>\n/// <returns>The sum of the numbers.</returns>"
  },
  {
    "rule": "SQL Query Best Practices",
    "description": "Avoid using `SELECT *` in SQL queries; specify the required columns explicitly.",
    "example": "SELECT id, name FROM Users;"
  },
  {
    "rule": "PascalCase for Method Names",
    "description": "All method names in C# must use PascalCase naming convention.",
    "example": "public void HandleError()"
  },
  {
    "rule": "nameof Usage",
    "description": "Avoid using string literals in the `nameof` operator; always reference variables directly.",
    "example": "nameof(variableName)"
  },
  {
    "rule": "Curly Braces for If Statements",
    "description": "All `if` statements must use curly braces `{}` even if the body contains a single statement.",
    "example": "if (condition) { return true; }"
  },
  {
    "rule": "Use Constants Instead of Default",
    "description": "Use constants (e.g., `0`, `null`, `false`) instead of `default(type)` for non-generic types.",
    "example": "int value = 0; // Instead of default(int)"
  },
  {
    "rule": "Service Variable Naming",
    "description": "Avoid including 'read-only' or 'read-write' in service variable names to promote clarity and consistency.",
    "example": "var userService = new UserService();"
  },
  {
    "rule": "Custom Exception Usage",
    "description": "Use the custom exception type `EntityNotFoundException` for handling cases where an entity is not found.",
    "example": "throw new EntityNotFoundException();"
  },
  {
    "rule": "TODO Comment Traceability",
    "description": "Include a reference to a ticket in TODO comments to ensure traceability.",
    "example": "// TODO DEV-23710: Refactor to use CertificateService.GetCertificateContent()"
  },
  {
    "rule": "Comment Quality",
    "description": "All comments, documentation, and user-facing strings must be free of typos, grammatical errors, and unclear language.",
    "example": "// Correct: Calculates the total cost of an order."
  },
  {
    "rule": "Method Separation",
    "description": "All methods in a class must have a single blank line separating them for better readability.",
    "example": "public void Method1() { }\n\npublic void Method2() { }"
  }
]
