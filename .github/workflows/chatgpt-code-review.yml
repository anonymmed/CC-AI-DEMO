name: ChatGPT Code Review Debugging

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: |
        npm install openai @octokit/rest@18.12.0

    - name: Fetch PR Diff
      id: get_diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff origin/${{ github.event.pull_request.base.ref }} > pr_diff.txt

    - name: Run ChatGPT Review
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cat <<'EOF' > review.js
        const fs = require('fs');
        const { OpenAI } = require('openai');
        const { Octokit } = require('@octokit/rest');

        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        async function reviewCode() {
          try {
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            console.log('Diff content:', diff);

            const rules = fs.readFileSync('rules.md', 'utf8');
            console.log('Rules content:', rules);

            const prompt = `
              Review the following Pull Request diff against the rules below:
              Rules:
              ${rules}
              Diff:
              ${diff}
              Provide a summary of violations and suggestions for improvements, and indicate the relevant line numbers.
            `;

            console.log('Generated prompt:', prompt);

            const response = await openai.chat.completions.create({
              model: 'gpt-4',
              messages: [{ role: 'user', content: prompt }],
              max_tokens: 1000,
            });

            console.log('API response:', JSON.stringify(response.data, null, 2));

            const feedback = response.data.choices[0].message.content;
            console.log('ChatGPT Review Response:', feedback);

            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const pull_number = parseInt(process.env.GITHUB_REF_NAME.split('/')[2], 10);
            const { data: files } = await octokit.pulls.listFiles({
              owner,
              repo,
              pull_number,
            });

            console.log('Files in the PR:', files);

            const commit_id = process.env.GITHUB_SHA;

            const comments = feedback.split('\\n').map((line) => {
              const match = line.match(/`([^`]+)`.*line (\\d+)/i);
              if (match) {
                const path = match[1];
                const lineNumber = parseInt(match[2], 10);
                const body = line;

                const file = files.find(f => f.filename === path);
                if (file) {
                  return { body, path: file.filename, line: lineNumber };
                }
              }
              return null;
            }).filter(Boolean);

            console.log('Comments to post:', comments);

            for (const comment of comments) {
              console.log('Posting comment with parameters:', {
                owner,
                repo,
                pull_number,
                commit_id,
                path: comment.path,
                line: comment.line,
                body: comment.body,
              });

              try {
                await octokit.pulls.createReviewComment({
                  owner,
                  repo,
                  pull_number,
                  body: comment.body,
                  commit_id,
                  path: comment.path,
                  line: comment.line,
                });
              } catch (err) {
                console.error('Failed to post comment:', err.message, err.response ? err.response.data : null);
              }
            }
          } catch (error) {
            console.error('Error during ChatGPT review:', error.message || error);
            process.exit(1);
          }
        }

        reviewCode();
        EOF

        node review.js
