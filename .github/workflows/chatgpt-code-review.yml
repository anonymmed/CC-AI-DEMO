name: ChatGPT Code Review with Inline Comments

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: |
        npm install openai @octokit/rest

    - name: Fetch PR Diff
      id: get_diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff origin/${{ github.event.pull_request.base.ref }} > pr_diff.txt

    - name: Run ChatGPT Review and Post Inline Comments
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Enable ES Modules by creating a package.json file
        echo '{
          "type": "module"
        }' > package.json

        # Create the script
        echo "import fs from 'fs';
        import { OpenAI } from 'openai';
        import { Octokit } from '@octokit/rest';

        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        async function reviewCode() {
          try {
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            const rules = fs.readFileSync('rules.md', 'utf8');

            const prompt = \`
              Review the following Pull Request diff against the rules below:
              Rules:
              \${rules}

              Diff:
              \${diff}

              Provide feedback with line numbers for each violation.
            \`;

            const response = await openai.chat.completions.create({
              model: 'gpt-4',
              messages: [{ role: 'user', content: prompt }],
              max_tokens: 1000,
            });

            console.log('OpenAI API Raw Response:', JSON.stringify(response.data, null, 2));

            if (!response.data || !response.data.choices || response.data.choices.length === 0) {
              throw new Error('Invalid or empty response from OpenAI API');
            }

            const feedback = response.data.choices[0].message.content;
            console.log('ChatGPT Feedback:');
            console.log(feedback);

            const comments = parseFeedback(feedback, diff);
            await postComments(comments);
          } catch (error) {
            console.error('Error during ChatGPT review:', error.message || error);
            process.exit(1);
          }
        }

        function parseFeedback(feedback, diff) {
          const lines = diff.split('\\n');
          const comments = [];

          // Parse GPT feedback and associate it with diff lines
          const feedbackLines = feedback.split('\\n').filter(line => line.trim() !== '');
          feedbackLines.forEach(fb => {
            const match = fb.match(/line (\\d+): (.*)/i);
            if (match) {
              const lineNumber = parseInt(match[1], 10);
              const comment = match[2];
              comments.push({ line: lineNumber, body: comment });
            }
          });

          return comments;
        }

        async function postComments(comments) {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          const pullNumber = parseInt(process.env.GITHUB_REF_NAME.split('/')[2], 10);

          for (const comment of comments) {
            await octokit.pulls.createReviewComment({
              owner,
              repo,
              pull_number: pullNumber,
              body: comment.body,
              commit_id: process.env.GITHUB_SHA,
              path: comment.path,
              line: comment.line,
            });
          }
        }

        reviewCode();" > review.mjs

        # Run the review script
        node review.mjs
