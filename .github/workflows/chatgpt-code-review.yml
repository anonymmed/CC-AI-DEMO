name: ChatGPT Inline Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions: 
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for accurate git blame

    - name: Fetch PR Branch
      run: |
        git fetch origin ${{ github.event.pull_request.head.ref }}
        git checkout ${{ github.event.pull_request.head.ref }}

    - name: Cache Node.js Modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install openai @octokit/rest@18.12.0 esprima

    - name: Fetch PR Diff with Octokit
      id: fetch_diff
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        cat <<'EOF' > fetch_diff.js
        const fs = require('fs');
        const { Octokit } = require('@octokit/rest');
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        async function fetchDiff() {
          try {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const pull_number = process.env.PR_NUMBER || process.env.GITHUB_EVENT_NUMBER;

            if (!pull_number) {
              console.error('PR number not found!');
              process.exit(1);
            }

            const { data } = await octokit.pulls.get({
              owner,
              repo,
              pull_number,
            });

            const diffUrl = data.diff_url;
            if (!diffUrl) {
              console.error('Failed to retrieve diff URL.');
              process.exit(1);
            }

            const diffResponse = await octokit.request(diffUrl);
            fs.writeFileSync('pr_diff.txt', diffResponse.data);
            console.log('PR diff successfully fetched and saved.');
          } catch (err) {
            console.error('Error fetching PR diff:', err.message);
            process.exit(1);
          }
        }

        fetchDiff();
        EOF
        node fetch_diff.js

    - name: Generate ChatGPT Feedback
      id: generate_feedback
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cat <<'EOF' > generate_feedback.js
        const fs = require('fs');
        const { OpenAI } = require('openai');
        const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
        const rules = JSON.parse(fs.readFileSync('.github/rules.json', 'utf8'));

        async function generateFeedback() {
          try {
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            const changes = diff.split('diff --git')
              .slice(1)
              .map(change => {
                const lines = change.split('\n');
                const filePath = lines[0]?.match(/b\/(\S+)/)?.[1];
                if (!filePath) return null;

                const header = lines.find(line => line.startsWith('@@'));
                const position = header ? parseInt(header.match(/\+([0-9]+)/)?.[1], 10) : null;
                const addedLines = [];
                let lineCounter = position || 0;

                for (const line of lines) {
                  if (line.startsWith('+') && !line.startsWith('+++')) {
                    addedLines.push({ lineNumber: lineCounter, lineDiff: line.slice(1) });
                    lineCounter++;
                  }
                }
                if (addedLines.length === 0) return null;
                return { filePath, addedLines };
              })
              .filter(Boolean);

            const feedbacks = [];
            for (const { filePath, addedLines } of changes) {
              const lines = JSON.stringify(addedLines, null, 2);
              const messages = [
                { role: "system", content: `Use rules to review code strictly.\nRules:\n${JSON.stringify(rules, null, 2)}` },
                { role: "user", content: `Review changes in \`${filePath}\`:\n${lines}` }
              ];
              const response = await openai.chat.completions.create({
                model: "gpt-4",
                messages,
                max_tokens: 2000,
              });
              const feedback = JSON.parse(response.choices[0].message.content);
              feedbacks.push(...feedback);
            }

            fs.writeFileSync('feedbacks.json', JSON.stringify(feedbacks, null, 2));
          } catch (err) {
            console.error('Error generating feedback:', err.message);
            process.exit(1);
          }
        }

        generateFeedback();
        EOF
        node generate_feedback.js

    - name: Post Inline Comments
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        cat <<'EOF' > post_comments.js
        const fs = require('fs');
        const { Octokit } = require('@octokit/rest');
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        async function postComments() {
          try {
            const feedbacks = JSON.parse(fs.readFileSync('feedbacks.json', 'utf8'));
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const pull_number = process.env.PR_NUMBER;

            for (const { filePath, line, issueDescription, whyIssue, fix } of feedbacks) {
              const body = `${issueDescription} | ${whyIssue} \n${fix ? `Fix:\n\`\`\`\n${fix}\n\`\`\`` : ''}`;
              console.log(`Posting comment for ${filePath}, line ${line}`);
              await octokit.pulls.createReviewComment({
                owner,
                repo,
                pull_number,
                body,
                path: filePath,
                position: line,
              });
            }
          } catch (err) {
            console.error('Error posting comments:', err.message);
            process.exit(1);
          }
        }

        postComments();
        EOF
        node post_comments.js
