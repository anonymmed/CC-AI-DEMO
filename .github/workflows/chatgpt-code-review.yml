name: ChatGPT Inline Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install openai @octokit/rest@18.12.0

    - name: Fetch PR Diff
      id: get_diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff origin/${{ github.event.pull_request.base.ref }} > pr_diff.txt

    - name: Generate ChatGPT Feedback
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cat <<'EOF' > generate_feedback.js
        const fs = require('fs');
        const { OpenAI } = require('openai');

        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        async function generateFeedback() {
          try {
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            const rules = fs.readFileSync('rules.md', 'utf8');

            const changes = diff.split('diff --git').slice(1).map(change => {
              const lines = change.split('\n');
              const filePathMatch = lines[0].match(/b\/([\w\d_./]+)/);
              const filePath = filePathMatch ? filePathMatch[1] : null;

              const header = lines.find(line => line.startsWith('@@'));
              const lineMatch = header ? header.match(/\+(\d+)/) : null;
              const addedStart = lineMatch ? parseInt(lineMatch[1], 10) : null;

              const addedLines = lines.filter(line => line.startsWith('+') && !line.startsWith('+++')).map(line => line.slice(1));

              return { filePath, addedStart, addedLines };
            }).filter(change => change.filePath && change.addedLines.length > 0);

            fs.writeFileSync('parsed_changes.json', JSON.stringify(changes));

            for (const { filePath, addedStart, addedLines } of changes) {
              if (!filePath || addedLines.length === 0) continue;

              const prompt = `
                Review the following changes in the file \`${filePath}\`:
                ${addedLines.join('\n')}

                Rules:
                ${rules}

                Provide feedback and suggestions for improvements, considering the coding standards and logic.
              `;

              const response = await openai.chat.completions.create({
                model: 'gpt-4',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 500,
                n: 1,
              });

              const feedback = response.data.choices[0].message.content;

              fs.appendFileSync('feedback.jsonl', JSON.stringify({ filePath, addedStart, feedback }) + '\n');
            }
          } catch (error) {
            console.error('Error during feedback generation:', error.message || error);
            process.exit(1);
          }
        }

        generateFeedback();
        EOF

        node generate_feedback.js

    - name: Post Comments
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cat <<'EOF' > post_comments.js
        const fs = require('fs');
        const { Octokit } = require('@octokit/rest');

        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        async function postComments() {
          try {
            const comments = fs.readFileSync('feedback.jsonl', 'utf8').trim().split('\n').map(JSON.parse);
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const pull_number = parseInt(process.env.GITHUB_REF_NAME.split('/')[2], 10);

            for (const { filePath, addedStart, feedback } of comments) {
              try {
                await octokit.pulls.createReviewComment({
                  owner,
                  repo,
                  pull_number,
                  body: feedback,
                  path: filePath,
                  line: addedStart,
                });
                console.log(`Comment posted for ${filePath} at line ${addedStart}`);
              } catch (err) {
                console.error(`Failed to post comment for ${filePath}:${addedStart}`, err.message);
              }
            }
          } catch (error) {
            console.error('Error during posting comments:', error.message || error);
            process.exit(1);
          }
        }

        postComments();
        EOF

        node post_comments.js
