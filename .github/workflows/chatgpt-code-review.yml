name: ChatGPT Inline Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions: 
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for accurate git blame

    - name: Cache Node.js Modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Dependencies
      run: npm install openai @octokit/rest@18.12.0 esprima

    - name: Generate ChatGPT Feedback
      id: generate_feedback
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        cat <<'EOF' > generate_feedback.js
        const fs = require('fs');
        const { OpenAI } = require('openai');
        const { Octokit } = require('@octokit/rest');

        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        const PR_NUMBER = process.env.PR_NUMBER;

        async function fetchPullRequestDiff() {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          const { data } = await octokit.pulls.get({
            owner,
            repo,
            pull_number: PR_NUMBER,
            mediaType: {
              format: 'diff',
            },
          });
          return data;
        }

        async function fetchCommitId() {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          const { data } = await octokit.pulls.get({
            owner,
            repo,
            pull_number: PR_NUMBER,
          });
          return data.head.sha;
        }

        async function generateFeedback() {
          try {
            const diff = await fetchPullRequestDiff();
            const commitId = await fetchCommitId();

            const feedbacks = [];
            const changes = diff.split('diff --git')
              .slice(1)
              .map(change => {
                const lines = change.split('\n');
                const filePathMatch = lines[0]?.match(/b\/(\S+)/);
                const filePath = filePathMatch ? filePathMatch[1] : null;

                if (!filePath || filePath.includes('workflows/') || filePath.includes('rules')) {
                  return null; // Skip invalid or workflow files
                }

                const addedLines = [];
                let lineCounter = 1;

                for (const line of lines) {
                  if (line.startsWith('+') && !line.startsWith('+++')) {
                    addedLines.push({ lineNumber: lineCounter, lineDiff: line.slice(1) });
                    lineCounter++;
                  }
                }

                if (addedLines.length > 0) {
                  return { filePath, addedLines, commitId };
                }
                return null;
              })
              .filter(Boolean);

            // Send chunks of code to ChatGPT for review
            for (const { filePath, addedLines } of changes) {
              const chunk = JSON.stringify(addedLines, null, 2);

              const messages = [
                {
                  role: 'system',
                  content: `You are an AI reviewing code. Use these rules strictly: ${JSON.stringify(rules, null, 2)}.`,
                },
                {
                  role: 'user',
                  content: `Review the following changes in the filePath \`${filePath}\`:\n${chunk}\nRespond strictly in JSON format.`,
                },
              ];

              try {
                const response = await openai.chat.completions.create({
                  model: 'gpt-4',
                  messages,
                  max_tokens: 1000,
                  n: 1,
                });

                const content = response.choices[0]?.message?.content;
                if (content?.trim() !== '{ "status": "pass" }') {
                  const feedback = JSON.parse(content);
                  feedback.forEach(item => feedbacks.push(item));
                }
              } catch (err) {
                console.error(`Error reviewing ${filePath}:`, err.message);
              }
            }

            fs.writeFileSync('feedbacks.json', JSON.stringify(feedbacks, null, 2));
          } catch (error) {
            console.error('Error generating feedback:', error.message);
            process.exit(1);
          }
        }

        generateFeedback();
        EOF
        node generate_feedback.js

    - name: Post Inline Comments
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        cat <<'EOF' > post_comments.js
        const fs = require('fs');
        const { Octokit } = require('@octokit/rest');

        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        const PR_NUMBER = process.env.PR_NUMBER;

        async function postComments() {
          try {
            const feedbacks = JSON.parse(fs.readFileSync('feedbacks.json', 'utf8'));
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const { data: diff } = await octokit.pulls.get({
              owner,
              repo,
              pull_number: PR_NUMBER,
              mediaType: { format: 'diff' },
            });

            for (const { filePath, line, issueDescription, whyIssue, fix } of feedbacks) {
              try {
                // Map line number to position using the diff from GitHub
                const diffPosition = mapLineToPosition(diff, filePath, line);

                if (diffPosition === null) {
                  console.warn(`Could not map line ${line} in file ${filePath} to a GitHub diff position.`);
                  continue;
                }

                const body = `${issueDescription} | ${whyIssue}\n\n${fix ? `Fix:\n\`\`\`\n${fix}\n\`\`\`` : ''}`;
                await octokit.pulls.createReviewComment({
                  owner,
                  repo,
                  pull_number: PR_NUMBER,
                  body,
                  path: filePath,
                  position: diffPosition,
                });
              } catch (err) {
                console.error(`Failed to post comment for ${filePath}:${line}:`, err.message);
              }
            }
          } catch (error) {
            console.error('Error during posting comments:', error.message);
            process.exit(1);
          }
        }

        postComments();
        EOF
        node post_comments.js
