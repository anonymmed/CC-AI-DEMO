name: ChatGPT Inline Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions: 
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for accurate git blame

    - name: Fetch PR Branch
      run: |
        git fetch origin ${{ github.event.pull_request.head.ref }}
        git checkout ${{ github.event.pull_request.head.ref }}
    
    - name: Cache Node.js Modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Dependencies
      run: npm install openai @octokit/rest@18.12.0 esprima

    - name: Fetch PR Diff
      id: get_diff
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        cat <<'EOF' > fetch_diff.js
        const fs = require('fs');
        const { Octokit } = require('@octokit/rest');
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

        async function fetchDiff() {
          try {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const pull_number = process.env.PR_NUMBER || process.env.GITHUB_EVENT_NUMBER;

            if (!pull_number) {
              console.error('PR number not found!');
              process.exit(1);
            }

            const { data: files } = await octokit.pulls.listFiles({
              owner,
              repo,
              pull_number,
            });

            let diff = '';
            for (const file of files) {
              if (file.patch) {
                diff += `diff --git a/${file.filename} b/${file.filename}\n`;
                diff += file.patch + '\n';
              }
            }

            fs.writeFileSync('pr_diff.txt', diff);
            console.log('PR diff successfully fetched and saved.');
          } catch (err) {
            console.error('Error fetching PR diff:', err.message);
            process.exit(1);
          }
        }

        fetchDiff();
        EOF
        node fetch_diff.js

    - name: Generate ChatGPT Feedback
      id: generate_feedback
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cat <<'EOF' > generate_feedback.js
        const fs = require('fs');
        const { OpenAI } = require('openai');
        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });
        const rulesPath = '.github/rules.json';
        const rules = JSON.parse(fs.readFileSync(rulesPath, 'utf8'));
        const MAX_TOKENS = 4000; // Updated max tokens
        const AVERAGE_LINE_CHARACTERS = 80; // Approximate average line length
        const CHARACTERS_PER_TOKEN = 4; // Approximate characters per token
        const RESERVED_TOKENS = 2000; // Reserve for the response
        async function generateFeedback() {
          try {
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            const changes = diff.split('diff --git')
              .slice(1)
              .map(change => {
                const lines = change.split('\n');
                const filePathMatch = lines[0]?.match(/b\/(\S+)/);
                const filePath = filePathMatch ? filePathMatch[1] : null;
                if (!filePath || filePath.includes('workflows/') || filePath.includes('rules')) {
                  return null; // Skip invalid or workflow files
                }
                const header = lines.find(line => line.startsWith('@@'));
                const position = header ? parseInt(header.match(/\+([0-9]+)/)?.[1], 10) : null;
                const addedLines = [];
                let lineCounter = position || 0;
                for (const line of lines) {
                  if (line.startsWith('+') && !line.startsWith('+++')) {
                    addedLines.push({
                      lineNumber: lineCounter,
                      lineDiff: line.slice(1),
                      commitId: null // Placeholder for commitId to be added later
                    });
                    lineCounter++;
                  }
                }
                if (addedLines.length === 0) {
                  return null; // Skip invalid changes
                }
                return { filePath, addedLines };
              })
              .filter(Boolean); // Remove null values
            const feedbacks = [];
            for (const { filePath, addedLines } of changes) {
              let chunk = [];
              let currentTokenCount = 0;
              for (const line of addedLines) {
                const lineTokenEstimate = Math.ceil((line.lineDiff.length || AVERAGE_LINE_CHARACTERS) / CHARACTERS_PER_TOKEN);
                if (currentTokenCount + lineTokenEstimate > MAX_TOKENS - RESERVED_TOKENS) {
                  // Process the current chunk
                  const messages = [
                    {
                      "role": "system",
                      "content": `You are an AI reviewing code. Always respond in valid JSON format as described. Use the provided rules strictly to identify issues. \nRules:\n${JSON.stringify(rules, null, 2)}`
                    },
                    {
                      "role": "user",
                      "content": `Review the following changes in the filePath \`${filePath}\`:\n${JSON.stringify(chunk, null, 2)}\nRespond strictly in the following JSON format:\n[\n  {\n    \"line\": <line_number>,\n    \"filePath\": \"<file_path>\",\n    \"issueDescription\": \"<short_description>\",\n    \"whyIssue\": \"<why_this_is_an_issue>\",\n    \"fix\": \"<code_snippet>\"\n  }\n]\nIf there are no issues, respond with:\n{ \"status\": \"pass\" }`
                    }
                  ];
                  try {
                    const response = await openai.chat.completions.create({
                      model: 'gpt-4',
                      messages,
                      max_tokens: RESERVED_TOKENS,
                      n: 1,
                    });
                    const feedbackContent = response.choices[0].message.content;
                    console.log(`Raw GPT Response:`, feedbackContent);
                    if (feedbackContent.trim() === '{ "status": "pass" }') {
                      console.log(`No issues found for ${filePath}`);
                    } else {
                      try {
                        const parsedFeedback = JSON.parse(feedbackContent);
                        parsedFeedback.forEach(item => {
                          feedbacks.push(item);
                        });
                      } catch (jsonError) {
                        console.error(`Invalid JSON response for ${filePath}:`, feedbackContent, jsonError.message);
                      }
                    }
                  } catch (error) {
                    console.error(`Error processing feedback for ${filePath}:`, error.message);
                  }
                  // Reset for the next chunk
                  chunk = [];
                  currentTokenCount = 0;
                }
                chunk.push(line);
                currentTokenCount += lineTokenEstimate;
              }
              // Process any remaining lines in the last chunk
              if (chunk.length > 0) {
                const messages = [
                  {
                    "role": "system",
                    "content": `You are an AI reviewing code. Always respond in valid JSON format as described. Use the provided rules strictly to identify issues. \nRules:\n${JSON.stringify(rules, null, 2)}`
                  },
                  {
                    "role": "user",
                    "content": `Review the following changes in the filePath \`${filePath}\`:\n${JSON.stringify(chunk, null, 2)}\nRespond strictly in the following JSON format:\n[\n  {\n    \"line\": <line_number>,\n    \"filePath\": \"<file_path>\",\n    \"issueDescription\": \"<short_description>\",\n    \"whyIssue\": \"<why_this_is_an_issue>\",\n    \"fix\": \"<code_snippet>\"\n  }\n]\nIf there are no issues, respond with:\n{ \"status\": \"pass\" }`
                  }
                ];
                try {
                  const response = await openai.chat.completions.create({
                    model: 'gpt-4',
                    messages,
                    max_tokens: RESERVED_TOKENS,
                    n: 1,
                  });
                  const feedbackContent = response.choices[0].message.content;
                  console.log(`Raw GPT Response:`, feedbackContent);
                  if (feedbackContent.trim() === '{ "status": "pass" }') {
                    console.log(`No issues found for ${filePath}`);
                  } else {
                    try {
                      const parsedFeedback = JSON.parse(feedbackContent);
                      parsedFeedback.forEach(item => {
                        feedbacks.push(item);
                      });
                    } catch (jsonError) {
                      console.error(`Invalid JSON response for ${filePath}:`, feedbackContent, jsonError.message);
                    }
                  }
                } catch (error) {
                  console.error(`Error processing feedback for ${filePath}:`, error.message);
                }
              }
            }
            fs.writeFileSync('feedbacks.json', JSON.stringify(feedbacks, null, 2));
          } catch (error) {
            console.error('Error generating feedback:', error.message);
            process.exit(1);
          }
        }
        generateFeedback();
        EOF
        node generate_feedback.js

    - name: Post Inline Comments
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        cat <<'EOF' > post_comments.js
        const fs = require('fs');
        const { Octokit } = require('@octokit/rest');
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        // Function to map line numbers to GitHub diff positions
        // Map file line numbers to GitHub diff positions
        function mapLineToPosition(diff, filePath, lineNumber) {
          const lines = diff.split('\n');
          let currentFile = null;
          let position = 0; // Global diff position for GitHub API
          let lineInFile = 0; // Tracks actual line number in the new file
          for (const line of lines) {
            if (line.startsWith('@@')) {
              // Start of a new hunk
              const match = line.match(/@@ -\d+(,\d+)? \+(\d+)(,\d+)? @@/);
              if (match) {
                lineInFile = parseInt(match[2], 10); // Starting line in new file for this hunk
                console.log(`Parsing hunk: Start line in new file = ${lineInFile}, Position = ${position}`);
              }
            } else if (line.startsWith('+++')) {
              currentFile = line.split(' ')[1]?.replace('b/', '');
            } else if (line.startsWith('+') && currentFile === filePath) {
              position++;
              if (lineInFile === lineNumber) {
                console.log(`Mapped file: ${filePath}, Line: ${lineNumber}, Diff Position: ${position}`);
                return position;
              }
              lineInFile++;
            } else if (!line.startsWith('-')) {
              // Context line, included in the position but doesn't increment lineInFile
              position++;
            }
          }
          console.warn(`Could not map line ${lineNumber} in file ${filePath} to a GitHub position.`);
          return null;
        }
        async function postComments() {
          try {
            const feedbacks = JSON.parse(fs.readFileSync('feedbacks.json', 'utf8'));
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const pull_number = process.env.PR_NUMBER;
            for (const { filePath, line, issueDescription, whyIssue, fix } of feedbacks) {
              try {
                // Map the line number to the GitHub diff position
                const position = mapLineToPosition(diff, filePath, line);
                if (position === null) {
                  console.warn(`Could not map line ${line} in file ${filePath} to a GitHub position.`);
                  continue;
                }
                const body = `${issueDescription} | ${whyIssue} \n\n${fix ? `Fix:\n\`\`\`\n${fix}\n\`\`\`` : ''}`;
                console.log(`Posting comment for file ${filePath}, line ${line}, mapped position ${position}`);
                await octokit.pulls.createReviewComment({
                  owner,
                  repo,
                  pull_number,
                  body,
                  path: filePath,
                  position,
                });
              } catch (err) {
                console.error(`Failed to post comment for ${filePath}:${line}`, err.message);
              }
            }
          } catch (error) {
            console.error('Error during posting comments:', error.message);
            process.exit(1);
          }
        }
        postComments();
        EOF
        node post_comments.js